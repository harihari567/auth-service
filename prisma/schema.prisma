// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expiresAt         DateTime
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id                     String                   @id @default(cuid())
  name                   String
  email                  String?                  @unique
  password               String
  emailVerified          DateTime?
  createdAt              DateTime                 @default(now())
  accounts               Account[]
  refreshTokens          RefreshToken[]
  resetToken             ResetToken[]
  emailVerificationToken EmailVerificationToken[]
  links          Link[]
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
}

model ResetToken {
  id        String   @id @default(cuid())
  token     String   @unique
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
}

model EmailVerificationToken {
  id        String   @id @default(cuid())
  token     String   @unique
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
}


model Link {
  id        String    @id @default(cuid())
  key       String    @unique
  url       String    @db.LongText 
  archived  Boolean   @default(false) // whether the link is archived or not
  expiresAt DateTime? // when the link expires â€“ stored on Redis via ttl

  title       String? // OG title for the link (e.g. Dub - Open-Source Bitly Alternative)
  description String? @db.VarChar(280) // OG description for the link (e.g. An open-source link management tool for modern marketing teams to create, share, and track short links.)
  image       String? @db.LongText // OG image for the link (e.g. https://dub.sh/og-image.png)

  // User who created the link
  user   User?   @relation(fields: [userId], references: [id])
  userId String?

  // Link metadata
  clicks      Int      @default(0) // number of clicks
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt


  @@index(createdAt(sort: Desc))
  @@index(clicks(sort: Desc))
  @@index(userId)
  @@fulltext([key, url])
}